/*---------------------------------------------------------------------------*
 *  smtupmd.d - LIBERO dialog data definitions for smtupmd.c.                *
 *  Generated by LIBERO 2.30 on  5 Dec, 1999, 14:17.                         *
 *  Schema file used: smtschm.c.                                             *
 *---------------------------------------------------------------------------*/

/*- Symbolic constants and event numbers ------------------------------------*/

#define _LR_STOP                        0xFFFFL
#define _LR_NULL_EVENT                  -2
#define _LR_NULL_STATE                  -1
#define terminate_event                 -1
#define control_event                   0
#define error_event                     1
#define exception_event                 2
#define fatal_event                     3
#define halt_event                      4
#define list_event                      5
#define master_event                    6
#define no_more_event                   7
#define not_found_event                 8
#define ok_event                        9
#define running_event                   10
#define shutdown_event                  11
#define sock_closed_event               12
#define sock_error_event                13
#define start_event                     14
#define start_auto_event                15
#define status_event                    16
#define stop_event                      17
#define stop_auto_event                 18
#define stopped_event                   19
#define task_event                      20
#define task_alarm_event                21
#define task_stopped_event              22
#define _LR_STATE_after_init            0
#define _LR_STATE_master_input          1
#define _LR_STATE_have_control_message  2
#define _LR_STATE_have_task_for_start   3
#define _LR_STATE_wait_task_started     4
#define _LR_STATE_have_task_for_stop    5
#define _LR_STATE_wait_task_stopped     6
#define _LR_STATE_have_task_for_status  7
#define _LR_STATE_wait_task_status      8
#define _LR_STATE_task_stopped          9
#define _LR_STATE_task_running          10
#define _LR_STATE_defaults              11
#define _LR_STATE_end_thread            12
#define _LR_defaults_state              11


/*- Function prototypes and macros ------------------------------------------*/

#ifndef MODULE
#define MODULE  static void             /*  Libero dialog modules            */
#endif

MODULE initialise_the_thread        (THREAD *thread);
MODULE create_task_threads          (THREAD *thread);
MODULE open_manager_log_file        (THREAD *thread);
MODULE open_master_socket           (THREAD *thread);
MODULE wait_for_socket_input        (THREAD *thread);
MODULE reply_ready_for_command      (THREAD *thread);
MODULE read_control_message         (THREAD *thread);
MODULE check_control_message        (THREAD *thread);
MODULE load_task_time_slots         (THREAD *thread);
MODULE load_task_values             (THREAD *thread);
MODULE run_task_idle_command        (THREAD *thread);
MODULE accept_control_connection    (THREAD *thread);
MODULE reply_list_of_tasks          (THREAD *thread);
MODULE reply_halting                (THREAD *thread);
MODULE commit_outgoing_replies      (THREAD *thread);
MODULE shutdown_the_application     (THREAD *thread);
MODULE terminate_the_thread         (THREAD *thread);
MODULE get_first_affected_task      (THREAD *thread);
MODULE reply_unrecognised_control   (THREAD *thread);
MODULE pass_start_to_task_thread    (THREAD *thread);
MODULE reply_task_started_ok        (THREAD *thread);
MODULE get_next_affected_task       (THREAD *thread);
MODULE reply_task_started_error     (THREAD *thread);
MODULE pass_stop_to_task_thread     (THREAD *thread);
MODULE reply_task_stopped_ok        (THREAD *thread);
MODULE reply_task_stopped_error     (THREAD *thread);
MODULE pass_status_to_task_thread   (THREAD *thread);
MODULE reply_task_running           (THREAD *thread);
MODULE reply_task_stopped           (THREAD *thread);
MODULE run_task_startup_command     (THREAD *thread);
MODULE monitor_active_task_status   (THREAD *thread);
MODULE signal_task_started_okay     (THREAD *thread);
MODULE signal_task_not_running      (THREAD *thread);
MODULE signal_task_stopped          (THREAD *thread);
MODULE signal_task_started_error    (THREAD *thread);
MODULE shut_down_child_task         (THREAD *thread);
MODULE run_task_cancel_command      (THREAD *thread);
MODULE signal_task_stopped_okay     (THREAD *thread);
MODULE signal_task_running          (THREAD *thread);
MODULE check_task_still_running     (THREAD *thread);
MODULE destroy_the_task             (THREAD *thread);
MODULE signal_socket_error          (THREAD *thread);
MODULE check_thread_type            (THREAD *thread);
MODULE close_manager_log_file       (THREAD *thread);

#define the_next_event              _the_next_event
#define the_exception_event         _the_exception_event
#define the_external_event          _the_external_event
#define exception_raised            _exception_raised
#define io_completed                _io_completed


/*- Static areas shared by all threads --------------------------------------*/

static word _LR_nextst [13][23] =
{
    { 2,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0 },
    { 0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0 },
    { 0,2,0,0,2,2,0,0,0,0,0,0,0,0,3,0,7,5,0,0,0,0,0 },
    { 0,0,0,0,0,0,0,2,2,4,0,0,0,0,0,0,0,0,0,0,0,0,0 },
    { 0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0 },
    { 0,0,0,0,0,0,0,2,2,6,0,0,0,0,0,0,0,0,0,0,0,0,0 },
    { 0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0 },
    { 0,0,0,0,0,0,0,2,2,8,0,0,0,0,0,0,0,0,0,0,0,0,0 },
    { 0,7,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,7,0,0,0 },
    { 0,0,9,0,0,0,0,0,0,0,0,0,0,0,10,10,9,9,9,0,0,9,0 },
    { 0,0,9,0,0,0,0,0,0,0,0,10,0,0,10,10,10,9,9,0,0,10,9 },
    { 0,0,12,12,0,0,0,0,0,0,0,12,12,12,0,0,0,0,0,0,0,0,0 },
    { 12,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0 }
};

static word _LR_action [13][23] =
{
    { 2,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0 },
    { 0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0 },
    { 0,8,0,0,6,5,0,0,0,0,0,0,0,0,7,0,7,7,0,0,0,0,0 },
    { 0,0,0,0,0,0,0,2,2,9,0,0,0,0,0,0,0,0,0,0,0,0,0 },
    { 0,11,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0 },
    { 0,0,0,0,0,0,0,2,2,12,0,0,0,0,0,0,0,0,0,0,0,0,0 },
    { 0,14,0,0,0,0,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0 },
    { 0,0,0,0,0,0,0,2,2,15,0,0,0,0,0,0,0,0,0,0,0,0,0 },
    { 0,18,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,17,0,0,0 },
    { 0,0,24,0,0,0,0,0,0,0,0,0,0,0,19,21,23,20,22,0,0,22,0 },
    { 0,0,24,0,0,0,0,0,0,0,0,31,0,0,25,22,28,26,27,0,0,29,30 },
    { 0,0,33,33,0,0,0,0,0,0,0,33,33,32,0,0,0,0,0,0,0,0,0 },
    { 35,0,0,0,0,0,34,0,0,0,0,0,0,0,0,0,0,0,0,0,36,0,0 }
};

static word _LR_offset [] =
{
    0,
    0,
    5,
    9,
    13,
    16,
    21,
    26,
    28,
    33,
    35,
    38,
    41,
    43,
    46,
    49,
    51,
    54,
    57,
    59,
    65,
    67,
    71,
    72,
    74,
    76,
    83,
    88,
    92,
    94,
    97,
    99,
    105,
    108,
    110,
    114,
    116
};

static word _LR_vector [] =
{
    0,1,2,3,_LR_STOP,
    4,5,6,_LR_STOP,
    7,8,9,_LR_STOP,
    10,3,_LR_STOP,
    11,4,5,6,_LR_STOP,
    12,13,14,15,_LR_STOP,
    16,_LR_STOP,
    17,4,5,6,_LR_STOP,
    18,_LR_STOP,
    19,20,_LR_STOP,
    21,20,_LR_STOP,
    22,_LR_STOP,
    23,20,_LR_STOP,
    24,20,_LR_STOP,
    25,_LR_STOP,
    26,20,_LR_STOP,
    27,20,_LR_STOP,
    20,_LR_STOP,
    7,8,28,29,30,_LR_STOP,
    31,_LR_STOP,
    8,28,29,_LR_STOP,
    _LR_STOP,
    32,_LR_STOP,
    33,_LR_STOP,
    34,35,7,8,28,30,_LR_STOP,
    34,35,9,36,_LR_STOP,
    34,35,9,_LR_STOP,
    37,_LR_STOP,
    38,29,_LR_STOP,
    9,_LR_STOP,
    34,35,9,39,15,_LR_STOP,
    40,41,_LR_STOP,
    41,_LR_STOP,
    42,14,15,_LR_STOP,
    15,_LR_STOP,
    39,15,_LR_STOP
};

static HOOK *_LR_module [43] = {
    create_task_threads,
    open_manager_log_file,
    open_master_socket,
    wait_for_socket_input,
    reply_ready_for_command,
    read_control_message,
    check_control_message,
    load_task_time_slots,
    load_task_values,
    run_task_idle_command,
    accept_control_connection,
    reply_list_of_tasks,
    reply_halting,
    commit_outgoing_replies,
    shutdown_the_application,
    terminate_the_thread,
    get_first_affected_task,
    reply_unrecognised_control,
    pass_start_to_task_thread,
    reply_task_started_ok,
    get_next_affected_task,
    reply_task_started_error,
    pass_stop_to_task_thread,
    reply_task_stopped_ok,
    reply_task_stopped_error,
    pass_status_to_task_thread,
    reply_task_running,
    reply_task_stopped,
    run_task_startup_command,
    monitor_active_task_status,
    signal_task_started_okay,
    signal_task_not_running,
    signal_task_stopped,
    signal_task_started_error,
    shut_down_child_task,
    run_task_cancel_command,
    signal_task_stopped_okay,
    signal_task_running,
    check_task_still_running,
    destroy_the_task,
    signal_socket_error,
    check_thread_type,
    close_manager_log_file
};

#if (defined (DEBUG))
static char *_LR_mname [43] =
{
     "Create-Task-Threads",
     "Open-Manager-Log-File",
     "Open-Master-Socket",
     "Wait-For-Socket-Input",
     "Reply-Ready-For-Command",
     "Read-Control-Message",
     "Check-Control-Message",
     "Load-Task-Time-Slots",
     "Load-Task-Values",
     "Run-Task-Idle-Command",
     "Accept-Control-Connection",
     "Reply-List-Of-Tasks",
     "Reply-Halting",
     "Commit-Outgoing-Replies",
     "Shutdown-The-Application",
     "Terminate-The-Thread",
     "Get-First-Affected-Task",
     "Reply-Unrecognised-Control",
     "Pass-Start-To-Task-Thread",
     "Reply-Task-Started-Ok",
     "Get-Next-Affected-Task",
     "Reply-Task-Started-Error",
     "Pass-Stop-To-Task-Thread",
     "Reply-Task-Stopped-Ok",
     "Reply-Task-Stopped-Error",
     "Pass-Status-To-Task-Thread",
     "Reply-Task-Running",
     "Reply-Task-Stopped",
     "Run-Task-Startup-Command",
     "Monitor-Active-Task-Status",
     "Signal-Task-Started-Okay",
     "Signal-Task-Not-Running",
     "Signal-Task-Stopped",
     "Signal-Task-Started-Error",
     "Shut-Down-Child-Task",
     "Run-Task-Cancel-Command",
     "Signal-Task-Stopped-Okay",
     "Signal-Task-Running",
     "Check-Task-Still-Running",
     "Destroy-The-Task",
     "Signal-Socket-Error",
     "Check-Thread-Type",
     "Close-Manager-Log-File"
};

static char *_LR_sname [13] =
{
     "After-Init",
     "Master-Input",
     "Have-Control-Message",
     "Have-Task-For-Start",
     "Wait-Task-Started",
     "Have-Task-For-Stop",
     "Wait-Task-Stopped",
     "Have-Task-For-Status",
     "Wait-Task-Status",
     "Task-Stopped",
     "Task-Running",
     "Defaults",
     "End-Thread"
};

static char *_LR_ename [23] =
{
     "Control-Event",
     "Error-Event",
     "Exception-Event",
     "Fatal-Event",
     "Halt-Event",
     "List-Event",
     "Master-Event",
     "No-More-Event",
     "Not-Found-Event",
     "Ok-Event",
     "Running-Event",
     "Shutdown-Event",
     "Sock-Closed-Event",
     "Sock-Error-Event",
     "Start-Event",
     "Start-Auto-Event",
     "Status-Event",
     "Stop-Event",
     "Stop-Auto-Event",
     "Stopped-Event",
     "Task-Event",
     "Task-Alarm-Event",
     "Task-Stopped-Event"
};
#else
static char *_LR_mname [43] =
{
     "0",
     "1",
     "2",
     "3",
     "4",
     "5",
     "6",
     "7",
     "8",
     "9",
     "10",
     "11",
     "12",
     "13",
     "14",
     "15",
     "16",
     "17",
     "18",
     "19",
     "20",
     "21",
     "22",
     "23",
     "24",
     "25",
     "26",
     "27",
     "28",
     "29",
     "30",
     "31",
     "32",
     "33",
     "34",
     "35",
     "36",
     "37",
     "38",
     "39",
     "40",
     "41",
     "42"
};

static char *_LR_sname [13] =
{
     "0",
     "1",
     "2",
     "3",
     "4",
     "5",
     "6",
     "7",
     "8",
     "9",
     "10",
     "11",
     "12"
};

static char *_LR_ename [23] =
{
     "0",
     "1",
     "2",
     "3",
     "4",
     "5",
     "6",
     "7",
     "8",
     "9",
     "10",
     "11",
     "12",
     "13",
     "14",
     "15",
     "16",
     "17",
     "18",
     "19",
     "20",
     "21",
     "22"
};
#endif
