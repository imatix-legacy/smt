<HTML><HEAD><!--Revised: 1 Jan 1999 By: Pieter Hintjens-->
<TITLE>The Time Slot Agent - SMTSLOT</TITLE></HEAD>
<BODY BACKGROUND="newstone.gif">
<TABLE WIDTH=100%><TR><TD ALIGN=LEFT>
 | <A HREF="/index.htm"> iMatix home page</A><BR>
 | <A href="index.htm">&lt;&lt;</A> | <A href="smt8.htm">&lt;</A>
 | <A href="smt10.htm">&gt;</A> | <A href="smt91.htm">&gt;&gt;</A>
<TD ALIGN=RIGHT>
<IMG SRC="smt100.gif" ALT="SMT Logo" WIDTH=80 HEIGHT=60 ALIGN=RIGHT HSPACE=10>
<FONT SIZE=5><B>SMT</B><BR><FONT SIZE=2>Version 2.81
</TABLE>
<HR>
<A NAME="SMTSLOT">&nbsp;</A>
<H3><A NAME="TOC46">The Time Slot Agent - SMTSLOT</A></H3>

<P>Manages 'time slots', a mechanism to allow long-running programs
to 'switch on' and 'switch off' at specific times during the day.
The time slot agent simulates a wall timer, i.e. a timer that
switches a device like a lamp or electric heater on and off during
the day.

<P>To use SMTSLOT, call <A href="smt79.htm#smtslot_init">smtslot init</A>(). This does not create
any threads. Create a named thread, then send SPECIFY events to
define the various time slots for your application.  Then send an
ON or OFF event to initialise the timer.  The time slot agent then
sends a SWITCH_ON event when the timer move to an 'ON' state, and a
SWITCH_OFF event when the timer moves to an 'OFF' state.  Errors
are sent to the console, not the requesting program.  SMTSLOT
supports these methods:
<UL>
<LI>SPECIFY - define a time slot specification.
<LI>ON - initialise timer - application is switched on.
<LI>OFF - initialise timer - application is switched off.
</UL>

<P>Example of initialising SMTSLOT:

<PRE>
/*  Static data                                                 */
static QID
    slotq;                       /*  Time slot event queue      */

    /*  In agent initialisation code                            */
    THREAD  *thread;            /*  Handle to various threads   */
    /*  Ensure that time slot agent is running, else start it   */
    <A href="smt79.htm#smtslot_init">smtslot init</A> ();
    if ((thread = <A href="smt49.htm#thread_create">thread create</A> (SMT_SLOT, "myprog")) != NULL)
        slotq = thread-&gt; queue-&gt; qid;
    else
        return (-1);
</PRE>

<H4>The SPECIFY Method</H4>

<P>Defines one or more time slots.  A slot specification is a
string, in the format: "name value ...".  The name field is a day
name ("mon"-"sun"), a date in MD order ("12/31") or a date in YMD
order ("95/12/31").  The value is a list of times in 24 hour
HH:MM[-HH:MM] format ("7:30-12:30 13:30-17:30 17:35").  A value
"off" clears all time slots for that day. The time slot accuracy
is SLOT_TICK csecs.  Any day that does not have specified values
is switched 'off'.  Build the event body using exdr_write() and the
message definition SMT_SLOT_SPEC.  The event body consists of these
fields (see exdr_write() for the field types):
<UL>
<LI>[s] slot specification string.
</UL>
SMTTRAN replies to a SPECIFY event with a SLOT_ERROR event if there
was an error, else it does not reply.

<H4>The ON Method</H4>

<P>Sets the timer 'ON'.  The event does not have a body.  The timer
will respond with a SWITCH_OFF event when it moves into an 'OFF'
state.

<H4>The OFF Method</H4>

<P>Sets the timer 'OFF'.  The event does not have a body.  The
timer will respond with a SWITCH_ON event when it moves into an
'ON' state.

<H4>Example Of Use</H4>

<P>The SMTTST2 agent shows an example of using the time slot
agent.

<H4>SMTSLOT Implementation</H4>

<P>The <A HREF="smtslot.htm">hypertext view</A> of SMTSLOT's dialog
and source code may help to understand how SMTSLOT works.

<HR><TABLE WIDTH=100%><TR><TD ALIGN=LEFT WIDTH=60%>
 | <A href="index.htm">&lt;&lt;</A> | <A href="smt8.htm">&lt;</A>
 | <A href="smt10.htm">&gt;</A> | <A href="smt91.htm">&gt;&gt;</A>
<TD ALIGN=RIGHT NOWRAP>
<A HREF="/index.htm">
<IMG SRC="im0096c.gif" WIDTH=96 HEIGHT=36 ALT="iMatix" BORDER=0 ALIGN=RIGHT>
</A>
<FONT SIZE=2>Copyright &#169; 1996-99 iMatix Corporation</TABLE>
</BODY></HTML>
