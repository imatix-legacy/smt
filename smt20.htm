<HTML><HEAD><!--Revised: 1 Jan 1999 By: Pieter Hintjens-->
<TITLE>SMT Kernel API functions</TITLE></HEAD>
<BODY BACKGROUND="newstone.gif">
<TABLE WIDTH=100%><TR><TD ALIGN=LEFT>
 | <A HREF="/index.htm"> iMatix home page</A><BR>
 | <A href="index.htm">&lt;&lt;</A> | <A href="smt19.htm">&lt;</A>
 | <A href="smt21.htm">&gt;</A> | <A href="smt91.htm">&gt;&gt;</A>
<TD ALIGN=RIGHT>
<IMG SRC="smt100.gif" ALT="SMT Logo" WIDTH=80 HEIGHT=60 ALIGN=RIGHT HSPACE=10>
<FONT SIZE=5><B>SMT</B><BR><FONT SIZE=2>Version 2.81
</TABLE>
<HR>
<H2><A NAME="TOC66">SMT Kernel API functions</A></H2>
<P>Filename: smtlib.h
<BR>Package: Libero SMT 2.x
<BR>Written: 1996/05/27 iMatix SMT kernel team <A
   HREF=mailto:"smt@imatix.com">smt@imatix.com</A>
<BR>Revised: 1999/08/01
<BR>Copyright: Copyright (c) 1991-2000 iMatix Corporation
<H3>Synopsis</H3>
<P>Defines the functions and objects used in the SMT kernel API.
<H4>List of Functions</H4>
<UL>
<LI>int <A href="smt21.htm#smt_init">smt init</A><BR>
   (void);
</LI>
<LI>int <A href="smt22.htm#smt_term">smt term</A><BR>
   (void);
</LI>
<LI>int <A href="smt23.htm#smt_exec_full">smt exec full</A><BR>
   (void);
</LI>
<LI>Bool <A href="smt24.htm#smt_exec_step">smt exec step</A><BR>
   (void);
</LI>
<LI>Bool <A href="smt25.htm#smt_active">smt active</A><BR>
   (void);
</LI>
<LI>void <A href="smt26.htm#smt_set_console">smt set console</A><BR>
   (const QID *qid);
</LI>
<LI>void <A href="smt27.htm#smt_set_timer">smt set timer</A><BR>
   (const QID *qid);
</LI>
<LI>int <A href="smt28.htm#smt_atexit">smt atexit</A><BR>
   (function exit_function);
</LI>
<LI>void <A href="smt29.htm#smt_shutdown">smt shutdown</A><BR>
   (void);
</LI>
<LI>char * <A href="smt69.htm#smt_crash_report">smt crash report</A><BR>
   (void);
</LI>
<LI>void <A href="smt68.htm#smt_set_step">smt set step</A><BR>
   (const char *step);
</LI>
<LI>AGENT * <A href="smt30.htm#agent_declare">agent declare</A><BR>
   (const char *agent_name);
</LI>
<LI>AGENT * <A href="smt31.htm#agent_lookup">agent lookup</A><BR>
   (const char *agent);
</LI>
<LI>int <A href="smt32.htm#agent_destroy">agent destroy</A><BR>
   (AGENT *agent);
</LI>
<LI>METHOD * <A href="smt33.htm#method_declare">method declare</A><BR>
   (AGENT *agent, const char *method_name, event_t number, int
   priority);
</LI>
<LI>METHOD * <A href="smt34.htm#method_lookup">method lookup</A><BR>
   (const AGENT *agent, const char *method);
</LI>
<LI>int <A href="smt35.htm#method_destroy">method destroy</A><BR>
   (METHOD *method);
</LI>
<LI>QUEUE * <A href="smt36.htm#queue_create">queue create</A><BR>
   (AGENT *agent, int max_events);
</LI>
<LI>QUEUE * <A href="smt37.htm#queue_lookup">queue lookup</A><BR>
   (const QID *qid);
</LI>
<LI>int <A href="smt38.htm#queue_destroy">queue destroy</A><BR>
   (QUEUE *queue);
</LI>
<LI>int <A href="smt40.htm#queue_flush">queue flush</A><BR>
   (QUEUE *queue);
</LI>
<LI>int <A href="smt39.htm#queue_deliver">queue deliver</A><BR>
   (QUEUE *queue, THREAD *thread);
</LI>
<LI>int <A href="smt41.htm#event_send">event send</A><BR>
   (const QID *to, const QID *from, char *name, byte *body, size_t
   body_size, char *accept, char *reject, char *expire, word
   timeout);
</LI>
<LI>EVENT * <A href="smt42.htm#event_accept">event accept</A><BR>
   (QUEUE *queue, EVENT *event);
</LI>
<LI>int <A href="smt43.htm#event_reject">event reject</A><BR>
   (QUEUE *queue, EVENT *event);
</LI>
<LI>int <A href="smt44.htm#event_expire">event expire</A><BR>
   (QUEUE *queue, EVENT *event);
</LI>
<LI>int <A href="smt45.htm#event_discard">event discard</A><BR>
   (QUEUE *queue, EVENT *event);
</LI>
<LI>EVENT * <A href="smt46.htm#event_iterate">event iterate</A><BR>
   (QUEUE *queue, EVENT *event);
</LI>
<LI>int <A href="smt47.htm#event_destroy">event destroy</A><BR>
   (EVENT *event);
</LI>
<LI>void <A href="smt48.htm#event_wait">event wait</A><BR>
   (void);
</LI>
<LI>THREAD * <A href="smt49.htm#thread_create">thread create</A><BR>
   (const char *agent, const char *thread);
</LI>
<LI>THREAD * <A href="smt50.htm#thread_lookup">thread lookup</A><BR>
   (const char *agent, const char *thread);
</LI>
<LI>int <A href="smt51.htm#thread_destroy">thread destroy</A><BR>
   (THREAD *thread, Bool cleanup);
</LI>
<LI>SEMAPH * <A href="smt52.htm#semaph_create">semaph create</A><BR>
   (const char *name, int value);
</LI>
<LI>SEMAPH * <A href="smt53.htm#semaph_lookup">semaph lookup</A><BR>
   (const char *name);
</LI>
<LI>int <A href="smt54.htm#semaph_destroy">semaph destroy</A><BR>
   (SEMAPH *semaph);
</LI>
<LI>int <A href="smt55.htm#semaph_wait">semaph wait</A><BR>
   (SEMAPH *semaph);
</LI>
<LI>int <A href="smt56.htm#semaph_signal">semaph signal</A><BR>
   (SEMAPH *semaph);
</LI>
<LI>int <A href="smt57.htm#lazy_creat">lazy creat</A><BR>
   (char *path, int mode);
</LI>
<LI>int <A href="smt58.htm#lazy_creat_text">lazy creat text</A><BR>
   (char *path, int mode);
</LI>
<LI>int <A href="smt59.htm#lazy_open">lazy open</A><BR>
   (char *path, int flags);
</LI>
<LI>int <A href="smt60.htm#lazy_open_text">lazy open text</A><BR>
   (char *path, int flags);
</LI>
<LI>int <A href="smt61.htm#lazy_read">lazy read</A><BR>
   (int handle, char *buffer, size_t count);
</LI>
<LI>int <A href="smt62.htm#lazy_write">lazy write</A><BR>
   (int handle, char *buffer, size_t count);
</LI>
<LI>int <A href="smt63.htm#lazy_close">lazy close</A><BR>
   (int handle);
</LI>
<LI>int <A href="smt64.htm#senderr">senderr</A><BR>
   (const QID *to_queue);
</LI>
<LI>int <A href="smt65.htm#sendfmt">sendfmt</A><BR>
   (const QID *to_queue, char *name, char *format,...);
</LI>
<LI>void <A href="smt66.htm#raise_exception">raise exception</A><BR>
   (event_t event);
</LI>
<LI>void <A href="smt67.htm#recycle_module">recycle module</A><BR>
   (Bool wanted);
</LI>
</UL>
<H4>List of Symbol Definitions</H4>
<P>smtlib.h defines these symbols, possibly conditionally:
<TABLE BORDER NOWRAP>
<TR><TH ALIGN="LEFT">Symbol:  </TH>
    <TH ALIGN="LEFT">Defined as:</TH>
<TR><TD ALIGN="LEFT"><TT><B>SEND(q,name,s)</B>  </TT>
<TD ALIGN="LEFT">event_send ((q), NULL, (name), (byte *) (s), <TR><TD ALIGN="LEFT"><TT><B>SMT_ACTION_STOP</B>  </TT>
<TD ALIGN="LEFT">0xFFFFL /* End of module list */
<TR><TD ALIGN="LEFT"><TT><B>SMT_AGENTEXISTS</B>  </TT>
<TD ALIGN="LEFT">15 /* Agent already declared */
<TR><TD ALIGN="LEFT"><TT><B>SMT_AGENTNOTREADY</B>  </TT>
<TD ALIGN="LEFT">16 /* Agent not initialised */
<TR><TD ALIGN="LEFT"><TT><B>SMT_AGENT_NORMAL</B>  </TT>
<TD ALIGN="LEFT">0 /* 1 queue for 1 thread */
<TR><TD ALIGN="LEFT"><TT><B>SMT_AGENT_ROUTER</B>  </TT>
<TD ALIGN="LEFT">1 /* 1 queue for n threads */
<TR><TD ALIGN="LEFT"><TT><B>SMT_EVENTEXISTS</B>  </TT>
<TD ALIGN="LEFT">1 /* Event already declared */
<TR><TD ALIGN="LEFT"><TT><B>SMT_INTERNALERROR</B>  </TT>
<TD ALIGN="LEFT">2 /* Agent had internal error */
<TR><TD ALIGN="LEFT"><TT><B>SMT_LOOP_DETECTION</B>  </TT>
<TD ALIGN="LEFT">2 /* After this, we abort */
<TR><TD ALIGN="LEFT"><TT><B>SMT_METHODEXISTS</B>  </TT>
<TD ALIGN="LEFT">3 /* Method already declared */
<TR><TD ALIGN="LEFT"><TT><B>SMT_NOERRORS</B>  </TT>
<TD ALIGN="LEFT">0 /* No errors */
<TR><TD ALIGN="LEFT"><TT><B>SMT_NOSUCHAGENT</B>  </TT>
<TD ALIGN="LEFT">8 /* Agent not defined */
<TR><TD ALIGN="LEFT"><TT><B>SMT_NOSUCHEVENT</B>  </TT>
<TD ALIGN="LEFT">4 /* Unknown event name */
<TR><TD ALIGN="LEFT"><TT><B>SMT_NOSUCHMETHOD</B>  </TT>
<TD ALIGN="LEFT">5 /* Unknown method name */
<TR><TD ALIGN="LEFT"><TT><B>SMT_NOSUCHQUEUE</B>  </TT>
<TD ALIGN="LEFT">6 /* Event queue not defined */
<TR><TD ALIGN="LEFT"><TT><B>SMT_NOSUCHSEMAPH</B>  </TT>
<TD ALIGN="LEFT">7 /* Unknown semaphore name */
<TR><TD ALIGN="LEFT"><TT><B>SMT_NOSUCHTHREAD</B>  </TT>
<TD ALIGN="LEFT">9 /* Thread not declared */
<TR><TD ALIGN="LEFT"><TT><B>SMT_NOTREADY</B>  </TT>
<TD ALIGN="LEFT">10 /* SMT API not initialised */
<TR><TD ALIGN="LEFT"><TT><B>SMT_NULL_EVENT</B>  </TT>
<TD ALIGN="LEFT">-2 /* No event provided */
<TR><TD ALIGN="LEFT"><TT><B>SMT_NULL_STATE</B>  </TT>
<TD ALIGN="LEFT">-1 /* Thread not initialised */
<TR><TD ALIGN="LEFT"><TT><B>SMT_OUTOFMEMORY</B>  </TT>
<TD ALIGN="LEFT">11 /* Not enough heap memory left */
<TR><TD ALIGN="LEFT"><TT><B>SMT_PRIORITY_HIGH</B>  </TT>
<TD ALIGN="LEFT">200 /* High priority */
<TR><TD ALIGN="LEFT"><TT><B>SMT_PRIORITY_LOW</B>  </TT>
<TD ALIGN="LEFT">50 /* Low priority */
<TR><TD ALIGN="LEFT"><TT><B>SMT_PRIORITY_MAX</B>  </TT>
<TD ALIGN="LEFT">255 /* Highest priority */
<TR><TD ALIGN="LEFT"><TT><B>SMT_PRIORITY_MIN</B>  </TT>
<TD ALIGN="LEFT">1 /* Lowest priority */
<TR><TD ALIGN="LEFT"><TT><B>SMT_PRIORITY_NORMAL</B>  </TT>
<TD ALIGN="LEFT">100 /* Default priority */
<TR><TD ALIGN="LEFT"><TT><B>SMT_PRIORITY_NULL</B>  </TT>
<TD ALIGN="LEFT">0 /* Illegal (null) priority */
<TR><TD ALIGN="LEFT"><TT><B>SMT_QUEUEISEMPTY</B>  </TT>
<TD ALIGN="LEFT">12 /* Event queue is empty */
<TR><TD ALIGN="LEFT"><TT><B>SMT_QUEUEISFULL</B>  </TT>
<TD ALIGN="LEFT">13 /* Event queue is full */
<TR><TD ALIGN="LEFT"><TT><B>SMT_SEMAPHEXISTS</B>  </TT>
<TD ALIGN="LEFT">14 /* Semaphore already exists */
<TR><TD ALIGN="LEFT"><TT><B>SMT_SHUTDOWN</B>  </TT>
<TD ALIGN="LEFT">"w" /* Shutdown signal */
<TR><TD ALIGN="LEFT"><TT><B>SMT_SIGNAL_ALRM</B>  </TT>
<TD ALIGN="LEFT">4 /* SIGALRM - timer signal */
<TR><TD ALIGN="LEFT"><TT><B>SMT_SIGNAL_INT</B>  </TT>
<TD ALIGN="LEFT">1 /* SIGINT - interrupted */
<TR><TD ALIGN="LEFT"><TT><B>SMT_SIGNAL_SEGV</B>  </TT>
<TD ALIGN="LEFT">3 /* SIGSEGV - segment violation */
<TR><TD ALIGN="LEFT"><TT><B>SMT_SIGNAL_TERM</B>  </TT>
<TD ALIGN="LEFT">2 /* SIGTERM - cancelled */
<TR><TD ALIGN="LEFT"><TT><B>SMT_SIGNAL_USER</B>  </TT>
<TD ALIGN="LEFT">5 /* User shutdown request */
<TR><TD ALIGN="LEFT"><TT><B>SMT_TERM_EVENT</B>  </TT>
<TD ALIGN="LEFT">-1 /* Terminate the thread */
<TR><TD ALIGN="LEFT"><TT><B>SMT_THREADEXISTS</B>  </TT>
<TD ALIGN="LEFT">17 /* Thread already declared */
<TR><TD ALIGN="LEFT"><TT><B>SMT_THREAD_ACTIVE</B>  </TT>
<TD ALIGN="LEFT">1 /* Active and executing */
<TR><TD ALIGN="LEFT"><TT><B>SMT_THREAD_PASSIVE</B>  </TT>
<TD ALIGN="LEFT">2 /* Passive, between states */
<TR><TD ALIGN="LEFT"><TT><B>SMT_THREAD_WAIT_EVENT</B>  </TT>
<TD ALIGN="LEFT">3 /* Waiting for an event */
<TR><TD ALIGN="LEFT"><TT><B>SMT_THREAD_WAIT_SEMAPH</B>  </TT>
<TD ALIGN="LEFT">4 /* Waiting for a semaphore */
<TR><TD ALIGN="LEFT"><TT><B>SMT_TOOMANYTHREADS</B>  </TT>
<TD ALIGN="LEFT">18 /* Too many threads */
<TR><TD ALIGN="LEFT"><TT><B>SMT_VERSION</B>  </TT>
<TD ALIGN="LEFT">"2.71" /* Main SMT version number */
<TR><TD ALIGN="LEFT"><TT><B>_SMTLIB_INCLUDED</B>  </TT>
<TD ALIGN="LEFT">TRUE
</TABLE>
<H4>List of Type Definitions</H4>
<TABLE BORDER NOWRAP>
<TR><TH ALIGN="LEFT">Type name:  </TH>
    <TH ALIGN="LEFT">Defined as:</TH>
<TR><TD ALIGN="LEFT"><TT><B>AGENT</B>  </TT>
<TD ALIGN="LEFT">struct _AGENT
<TR><TD ALIGN="LEFT"><TT><B>EVENT</B>  </TT>
<TD ALIGN="LEFT">struct _EVENT
<TR><TD ALIGN="LEFT"><TT><B>HOOK</B>  </TT>
<TD ALIGN="LEFT">void () (THREAD *)
<TR><TD ALIGN="LEFT"><TT><B>METHOD</B>  </TT>
<TD ALIGN="LEFT">struct _METHOD
<TR><TD ALIGN="LEFT"><TT><B>QID</B>  </TT>
<TD ALIGN="LEFT">struct _QID
<TR><TD ALIGN="LEFT"><TT><B>QUEUE</B>  </TT>
<TD ALIGN="LEFT">struct _QUEUE
<TR><TD ALIGN="LEFT"><TT><B>SEMAPH</B>  </TT>
<TD ALIGN="LEFT">struct _SEMAPH
<TR><TD ALIGN="LEFT"><TT><B>THREAD</B>  </TT>
<TD ALIGN="LEFT">struct _THREAD
<TR><TD ALIGN="LEFT"><TT><B>event_t</B>  </TT>
<TD ALIGN="LEFT">short int
<TR><TD ALIGN="LEFT"><TT><B>state_t</B>  </TT>
<TD ALIGN="LEFT">short int
</TABLE>
<HR><TABLE WIDTH=100%><TR><TD ALIGN=LEFT WIDTH=60%>
 | <A href="index.htm">&lt;&lt;</A> | <A href="smt19.htm">&lt;</A>
 | <A href="smt21.htm">&gt;</A> | <A href="smt91.htm">&gt;&gt;</A>
<TD ALIGN=RIGHT NOWRAP>
<A HREF="/index.htm">
<IMG SRC="im0096c.gif" WIDTH=96 HEIGHT=36 ALT="iMatix" BORDER=0 ALIGN=RIGHT>
</A>
<FONT SIZE=2>Copyright &#169; 1996-99 iMatix Corporation</TABLE>
</BODY></HTML>
