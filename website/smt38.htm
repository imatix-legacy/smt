<HTML><HEAD><!--Revised: 1 Jan 1999 By: Pieter Hintjens-->
<TITLE>queue_destroy</TITLE></HEAD>
<BODY BACKGROUND="newstone.gif">
<TABLE WIDTH=100%><TR><TD ALIGN=LEFT>
 | <A HREF="/index.htm"> iMatix home page</A><BR>
 | <A href="index.htm">&lt;&lt;</A> | <A href="smt37.htm">&lt;</A>
 | <A href="smt39.htm">&gt;</A> | <A href="smt91.htm">&gt;&gt;</A>
<TD ALIGN=RIGHT>
<IMG SRC="smt100.gif" ALT="SMT Logo" WIDTH=80 HEIGHT=60 ALIGN=RIGHT HSPACE=10>
<FONT SIZE=5><B>SMT</B><BR><FONT SIZE=2>Version 2.81
</TABLE>
<HR>
<A NAME="queue_destroy">&nbsp;</A>
<H3><A NAME="TOC84"><TT>queue_destroy</TT></A></H3>
<PRE>
#include "smtlib.h"
int
queue_destroy (
    QUEUE *queue                        /*  Queue to destroy                 */
)
</PRE>
<H4>Synopsis</H4>
<P>Deletes any events in the event queue and then destroys the
   queue and all its threads. Returns 0 when successfully
   completed. In case of error, returns -1 and sets smt_errno to
   one of these values: <TABLE BORDER NOWRAP> <TR><TD
   ALIGN="LEFT"><B>SMT NOTREADY</B>  <TD ALIGN="LEFT">smt_init()
   was not called, or failed <TR><TD ALIGN="LEFT"><B>SMT
   NOSUCHQUEUE</B>  <TD ALIGN="LEFT">The event queue is not
   defined </TABLE>
<H4>Source Code - (smtlib.c)</H4>
<PRE>
{
#if (defined (SMT_TRACE))
    trace ("queue_destroy");
#endif
    ASSERT (queue);
    if (!smt_alive)                     /*  If SMT API was not correctly     */
      {                                 /*    initialised, forget it         */
        smt_errno = SMT_NOTREADY;
        return (-1);
      }

    /*  Delete all events in the queue                                       */
    while (<A href="smt45.htm#event_discard">event discard</A> (queue, NULL) == 0);

    /*  Destroy all threads defined for the queue                            */
    while (queue-&gt; threads.next != &amp;queue-&gt; threads)
        <A href="smt51.htm#thread_destroy">thread destroy</A> (queue-&gt; threads.next, FALSE);

    /*  We have to be a little careful or sym_delete_symbol () will          */
    /*  try to release the symbol's data area; the data area points          */
    /*  to our node, which we want to release ourselves.                     */
    queue-&gt; symbol-&gt; data = NULL;
    sym_delete_symbol (dict, queue-&gt; symbol);

    /*  Now delete the queue itself                                          */
    node_destroy (queue);
    return (0);
}
</PRE>
<HR><TABLE WIDTH=100%><TR><TD ALIGN=LEFT WIDTH=60%>
 | <A href="index.htm">&lt;&lt;</A> | <A href="smt37.htm">&lt;</A>
 | <A href="smt39.htm">&gt;</A> | <A href="smt91.htm">&gt;&gt;</A>
<TD ALIGN=RIGHT NOWRAP>
<A HREF="/index.htm">
<IMG SRC="im0096c.gif" WIDTH=96 HEIGHT=36 ALT="iMatix" BORDER=0 ALIGN=RIGHT>
</A>
<FONT SIZE=2>Copyright &#169; 1996-99 iMatix Corporation</TABLE>
</BODY></HTML>
