<HTML><HEAD><!--Revised: 1 Jan 1999 By: Pieter Hintjens-->
<TITLE>Writing A Native SMT Program</TITLE></HEAD>
<BODY BACKGROUND="newstone.gif">
<TABLE WIDTH=100%><TR><TD ALIGN=LEFT>
 | <A HREF="/index.htm"> iMatix home page</A><BR>
 | <A href="index.htm">&lt;&lt;</A> | <A href="smt2.htm">&lt;</A>
 | <A href="smt4.htm">&gt;</A> | <A href="smt91.htm">&gt;&gt;</A>
<TD ALIGN=RIGHT>
<IMG SRC="smt100.gif" ALT="SMT Logo" WIDTH=80 HEIGHT=60 ALIGN=RIGHT HSPACE=10>
<FONT SIZE=5><B>SMT</B><BR><FONT SIZE=2>Version 2.81
</TABLE>
<HR>
<H2><A NAME="TOC25">Writing A Native SMT Program</A></H2>

<P>A native program is a <EM>agent</EM>.  To build an agent you:
<UL>
<LI>Design a dialog using Libero, and base the dialog on the
smtschm.c schema (specify -schema=smtschm.c).
<LI>Generate a skeleton program.
<LI>Modify the program and dialog, regenerate, compile, and link
the application, and repeat until satisfied.
</UL>

<P>When you design an agent you must decide whether the it is
single-threaded or multithreaded.  What's the difference?
<UL>
<LI>A single-threaded agent handles just one logical thread; a
multithreaded agent handles multiple logical threads in
parallel.
<LI>A single-threaded agent manages one event queue; a
multithreaded agent manages (usually) several event queues.
<LI>A multithreaded agent is usually 'connection oriented' while
a single-threaded agent is usually 'service oriented'.
</UL>

<P>By convention, a single-threaded agent creates an unnamed
thread when it initialises.  A multithreaded agent, by contrast,
typically create a new thread for each new connection, and uses a
different name for each thread.

<P>An example of a single-threaded agent is the operator console.
This is a program that accepts error messages or warnings from
other parts of the application, then does something useful with
them.  (The current implementation writes them to stderr.)  The
operator console has no need for multiple threads.

<P>An example of a multithreaded agent is the logging agent.  This
is a program that manages log files on behalf of other application
programs.  It does this at a low priority, and without blocking,
so that log file data is written without disturbing ongoing work.
The logging agent can write to several log files in parallel: it
does this by having one thread for each log file.

<P>To specify that an agent is single-threaded, define
SINGLE_THREADED as TRUE near the start of the program.  For
instance, this code comes from the SMTOPER agent:

<PRE>
/*- Definitions ------------------------------------------------*/

#define AGENT_NAME      SMT_OPERATOR  /*  Our public name       */
#define SINGLE_THREADED TRUE          /*  Single-threaded agent */
</PRE>

<H3><A NAME="TOC26">Initialising An agent</A></H3>

<P>An agent program must be 'initialised' before it can do any
useful work.  For instance, to initialise the logging agent, the
application must call the function <A href="smt77.htm#smtlog_init">smtlog init</A>().  Generally,
agents are initialised by the stub program, or by other agents.
We generally recommend that an agent always try to initialise
every agent it requires.  It is safe to call initialisation
function for an agent several times; only the first call has any
effect.

<P>The initialisation function is the only public function for a
agent.  Once an agent is initialised, it communicates with other
programs only via events.

<P>An agent program is based on a Libero dialog, and is 'driven'
by a chunk of code generated by Libero.  This code (defined as an
#include file) handles the initialisation of the agent.  The code
looks something like this (we explain each part):

<PRE>
if (<A href="smt31.htm#agent_lookup">agent lookup</A> (AGENT_NAME))
    return (0);                 /*  Agent already declared     */
</PRE>

<P>The <A href="smt31.htm#agent_lookup">agent lookup</A>() function returns NULL if an agent object
with the specified name already exists.  Otherwise it returns a
pointer to the agent object.  Here we check that the agent has
not already been declared.  The generated code assumes that
AGENT_NAME has been defined to hold the name of the agent.
AGENT_NAME can be a variable or a pre-processor macro (the
generated skeleton program defines it as a macro).

<PRE>
if ((agent = <A href="smt30.htm#agent_declare">agent declare</A> (AGENT_NAME)) == NULL)
    return (-1);                /*  Could not declare agent    */
</PRE>

<P>The <A href="smt30.htm#agent_declare">agent declare</A>() function returns a pointer to the
newly-created agent object.  If there was an error (e.g. not
enough memory), it returns NULL.

<PRE>
#if (defined (SINGLE_THREADED))
agent-&gt; tcb_size    = 0;    /*  No context block            */
agent-&gt; max_threads = 1;    /*    and max. 1 thread         */
#else
agent-&gt; tcb_size    = sizeof (TCB);
#endif
</PRE>

<P>Once the agent has been created, the generated code sets the
thread context block (TCB) size depending on whether the agent is
single threaded or multithreaded.  A single-threaded agent does
not need TCBs, so the size is zero.  The code assumes that
SINGLE_THREADED has been defined as a macro if required.  The
generated code then sets a variety of fields in the agent block.
This allows the SMT kernel to 'drive' the agent program
correctly.

<P>This is how a typical multithreaded agent program initialises
(this code is taken from smtlog.c):

<PRE>
#define AGENT_NAME  SMT_LOGGING    /*  Our public name         */
</PRE>

<P>The SMT_LOGGING symbol is defined in the standard SMT header
file, smtlib.h, since this agent is part of the standard package.
For your own agents you would define AGENT_NAME as a string
literal.  Note that agent names must be unique within the
application.

<PRE>
int smtlog_init (void)
{
    AGENT   *agent;             /*  Handle for our agent        */
    THREAD  *thread;            /*  Handle to console thread    */
#   include "smtlog.i"          /*  Include dialog interpreter  */
</PRE>

<P>The initialisation code in smtlog.i assumes that a variable
'agent' is defined.  Then, you can refer to the agent in
following code using this 'handle'.  The first thing we do is to
declare each method:

<PRE>
/*                           Method     Event value  Priority  */
    <A href="smt33.htm#method_declare">method declare</A> (agent, "SHUTDOWN", shutdown_event,
                                             SMT_PRIORITY_MAX);
    <A href="smt33.htm#method_declare">method declare</A> (agent, "OPEN",     open_event,         0);
    <A href="smt33.htm#method_declare">method declare</A> (agent, "PUT",      put_event,          0);
    <A href="smt33.htm#method_declare">method declare</A> (agent, "CLOSE",    close_event,        0);
</PRE>

<P>Methods names are not case-sensitive, but by convention we
specify them in uppercase.  Every agent must support the SHUTDOWN
method; this is sent to each agent when the SMT kernel terminates
(for instance when interrupted).  SHUTDOWN gets a high priority,
so that an agent will handle shutdown events before any other
waiting events.  The other events get a normal priority (0 means
'default').

<P>You can define several methods for the same event.  The SMT
kernel uses the set of methods to translate an incoming external
event into an internal dialog event.

<PRE>
    /*  Ensure that operator console is running, else start it  */
    <A href="smt78.htm#smtoper_init">smtoper init</A> ();
    if ((thread = <A href="smt50.htm#thread_lookup">thread lookup</A> (SMT_OPERATOR, "")) != NULL)
        console = thread-&gt; queue-&gt; qid;
    else
        return (-1);
</PRE>

<P>This agent sends error messages to the operator console agent,
which is generally a good idea.  It initialises the agent (with
no effect if the agent is already initialised) and then gets the
console queue id, so it can send events to the operator console.
Note how we do a <A href="smt50.htm#thread_lookup">thread lookup</A>() with an empty thread name.
The operator console is single threaded, and that single thread
has no name.

<PRE>
    /*  Signal okay to caller that we initialised okay          */
    return (0);
}
</PRE>

<P>Finally, if everything went as expected, we return 0 to signal
that to the calling program.  This is a convention, although you
can write the initialisation function any way you like, accepting
any arguments and returning any value that is appropriate.

<H3><A NAME="TOC27">The Thread Context Block</A></H3>

<P>Threads can share data: any global data in the agent program
is de-facto shared by all threads.  Since threads also need
'private' data, each thread owns a block of memory called the
Thread Context Block, or TCB.  The SMT kernel allocates such a
block when a thread is created.

<P>The TCB is a structure that contains arbitrary fields.  You
define this structure at the start of your program.  All code
modules in the program receive a pointer to this structure: they
use the pointer to reference private data.  For instance, this is
how the smtlog.c agent declares its TCB:

<PRE>
typedef struct                  /*  Thread context block:       */
{
    int handle;                 /*    Handle for i/o            */
} TCB;
</PRE>

This is how the smtlog.c agent opens a file:

<PRE>
/*******************   OPEN THREAD LOGFILE   ********************/

MODULE open_thread_logfile (THREAD *thread)
{
    char
        *logfile_name;

    tcb = thread-&gt; tcb;         /*  Point to thread's context   */

    /*  Event body or thread name supplies name for log file    */
    logfile_name = (strused (thread-&gt; event-&gt; body)?
                    thread-&gt; event-&gt; body:
                    thread-&gt; name);
    tcb-&gt; handle = <A href="smt57.htm#lazy_creat">lazy creat</A> (logfile_name, S_IREAD | S_IWRITE);
    if (io_completed)
      {
        if (tcb-&gt; handle &lt; 0)   /*  If open failed, send error  */
          {                     /*    to console, and terminate */
            <A href="smt65.htm#sendfmt">sendfmt</A> (&console, "ERROR",
                     "Could not open %s for output",
                      logfile_name);
            <A href="smt64.htm#senderr">senderr</A> (&console);
            <A href="smt66.htm#raise_exception">raise exception</A> (exception_event);
          }
      }
}
</PRE>

<H3><A NAME="TOC28">Choosing Event Names</A></H3>

<P>We generally use the same name for the method as for the event.
E.g. CLOSE and close_event.  This is not obligatory, and in some
cases not appropriate, but it does make the program easier to
understand when dialog event names correspond to methods.

<H3><A NAME="TOC29">Mechanics Of Event Delivery</A></H3>

<P>The agent kernel delivers events to threads when required.
This happens at a precise moment: when the thread moves to a new
dialog state -- after executing the action module list -- and no
internal event was provided.

<P>When a thread moves into a state, the set of possible events is
those events defined in that state, plus the events defined in the
Defaults state, if any.

<P>The SMT kernel takes the following event (or the event with the
highest priority) and tries to match it to a method name.  If the
event does not match a method, the event is rejected.  Otherwise
it is accepted and translated into an internal event number.  If
the internal event is illegal at that moment in the dialog, this
causes a fatal dialog error (the thread rejects the event).

<H3><A NAME="TOC30">Waiting For An External Event</A></H3>

<P>Normally the SMT kernel delivers an external event when the
dialog moves to a new state, and no event was specified.  In some
cases this can make a dialog rather large, since you need to break
each step up into states.  The <A href="smt48.htm#event_wait">event wait</A>() function causes
the dialog to halt until an event can be taken from the queue.
When several threads are executable, this function also switches
execution to the next thread.

<P>The <A href="smt48.htm#event_wait">event wait</A>() call sets the variable
"the_external_event".  This should be the last statement in a
dialog module.  When used in the last module in a list, it has
strictly no effect.

<H3><A NAME="TOC31">Sending Structured Event Data</A></H3>

<P>Events can optionally have a body to carry additional
information.  When you send textual data - for instance a string -
the event body can be transferred between programs without any
type of conversion.  (We ignore problems of character-set
conversion at present.)

<P>When you need to send several items in one event body, we speak
of sending <EM>structured data</EM>.  Structured data consists of
a mixture of data items of these types:
<UL>
<LI>Single bytes
<LI>Characters
<LI>Double-bytes
<LI>Quad-bytes
<LI>Booleans
<LI>Null-terminated strings
<LI>Blocks of binary data
</UL>

<P>An example of events with structured data are those accepted by
the socket i/o agent <A href="smt10.htm#SMTSOCK">SMTSOCK</A>.

<P>In C, we can group the data items in a structure, hence the
term.  We cannot, however, simply copy the structure into the
message and send that.  We cannot copy the address of the
structure.  Both these methods will work today, but an event may
(in the future) be sent to an agent in a different process,
perhaps running on a different machine.
<UL>
<LI>The agent may run in a different address space, so passing
addresses is definitely not a good idea.
<LI>Structures can contain empty space (padding) that depends on
the compiler used, the compiler options, and the machine word
size.  So, if you pass a structure as-is, the data may not map
correctly to the receiving program's structure.
<LI>Different systems use different ways of ordering the bytes in
a multi-byte integer.  One often hears the terms 'little-endian'
and 'big-endian'; these are just the two main varieties.
</UL>

<P>Our solution is to take each data field in turn, and pack the
structure into a machine-independent stream.  We transmit this
stream, then do the reverse unpacking in the target program.

<P>To do the conversion we use the SFL functions exdr_read() and
exdr_write().

<P>This is more work than just sending the complete structure, but
is the only way to ensure that data can safely be sent between two
programs that may be running on separate systems.

<H3><A NAME="TOC32">Sending Events Within An Agent</A></H3>

<P>Within one agent, you do not need to use the EXDR functions.
It is quite acceptable to pass data in a structure.  To do this,
<UL>
<LI>Define a structure for each event you want to send;
<LI>To send an event, fill-in the structure fields and send the
structure using the event_send function;
<LI>Access the individual fields using a type cast as follows:
<PRE>(SOMESTRUCT *) thread-> event-> body-> some_field</PRE>
</UL>

<H3><A NAME="TOC33">Ignoring External Events</A></H3>

<P>In some cases, you may want to ignore reply events sent by an
agent.  This can be useful to simplify a dialog.  This is how we
declare a method to ignore some specific event:

<PRE>
    <A href="smt33.htm#method_declare">method declare</A> (agent, "SOME_EVENT", SMT_NULL_EVENT, 0);
</PRE>

<H3><A NAME="TOC34">Non-Blocking File Access</A></H3>

<P>The SMT kernel provides a minimum file access layer that is
safe to use in multithreaded programs.  To understand what this
means, first understand what is 'unsafe'.

<P>On some systems, like UNIX and Digital VMS, file access may
need resources that are not always available - like memory for
buffers.  If you ask to read some data from a file, and there is a
problem, the operating system may loop a few times - waiting and
then trying again - before finally returning to the calling
program.  In the meantime your program and all threads are
blocked.

<P>The general solution is to request <EM>non-blocking file
access</EM>.  Then, in the case of a resource problem, the
operating will not loop, but will return at once with an error
code that means 'try again'.  The SMT kernel integrates this
solution with its thread management, so that a thread waiting for
file access will loop slowly, allowing other threads to continue
to run.

<P>To make this work, you should not call the open(), creat(),
read(), or write() functions directly in your program.  Instead,
call the SMT kernel functions <A href="smt59.htm#lazy_open">lazy open</A>(), <A href="smt57.htm#lazy_creat">lazy creat</A>(),
<A href="smt61.htm#lazy_read">lazy read</A>(), <A href="smt62.htm#lazy_write">lazy write</A>(), and <A href="smt63.htm#lazy_close">lazy close</A>().
Furthermore, construct your code like this:

<PRE>
rc = <A href="smt62.htm#lazy_write">lazy write</A> (tcb-> handle, formatted, fmtsize);
if (io_completed && rc < 0)     /*  If write failed send error  */
  {                             /*    to console and terminate  */
    <A href="smt65.htm#sendfmt">sendfmt</A> (&console, "ERROR",
             "Could not write to %s", thread-> name);
    <A href="smt64.htm#senderr">senderr</A> (&console);
    <A href="smt66.htm#raise_exception">raise exception</A> (exception_event);
  }
</PRE>

<P>If <TT>io_completed</TT> is FALSE, then the code module should
do no further work.  In this case the SMT kernel automatically re-
executes the <EM>entire</EM> code module.

<P>This is simple and sufficient for sequential file access.  If
you need heavy database access, where one SELECT statement may
take a long time to complete, you'll find that your program
responds slowly.  A better architecture in such cases is to handle
database requests in a separate process, which talks to your
application program using sockets.  The requests will take the
same time to complete, but in the meantime other threads - e.g.
handling new connections - can run normally.

<P>While we generally recommend you use the non-blocking i/o
functions, there are instances where this is not really necessary.
Most obviously, when an application is initialising (e.g. reading
configuration files) or terminating (dumping data to a log file),
there is no need to avoid blocking i/o.  In such cases, you can
access sequential files directly.

<H3><A NAME="TOC35">Real-time Programming</A></H3>

<P>When you call a function like <A href="smt61.htm#lazy_read">lazy read</A>() and it detects a
'busy' condition, it sets <TT>io_completed</TT> to FALSE, and
automatically re-executes the current code module.  You may want
to manage this yourself, however.  It can also be useful to have a
similar looping when you access a socket and receive the EAGAIN
error code.

<P>The <A href="smt67.htm#recycle_module">recycle module</A>() function lets you control this looping
explicitly.  For example, we can decide to abort a file access
after more than RETRY_MAX retries:

<PRE>
typedef struct                  /*  Thread context block:       */
{
    int handle;                 /*    Handle for i/o            */
    int retries;                /*    Number of retries so far  */
} TCB;
</PRE>

Let's assume that 'retries' has been set to zero, either during
thread initialisation (okay), or by a specific dialog module
(better).  We can then try to open a file like this, calling
<A href="smt67.htm#recycle_module">recycle module</A>() with a FALSE argument to prevent looping when
we have retried too often:

<PRE>
/********************   OPEN THREAD LOGFILE   *******************/

MODULE open_thread_logfile (THREAD *thread)
{
    tcb = thread-&gt; tcb;         /*  Point to thread's context   */

    /*  Our thread's name is the name for the log file          */
    tcb-&gt; handle = <A href="smt57.htm#lazy_creat">lazy creat</A>
                      (thread-&gt; name, S_IREAD | S_IWRITE);
    if (io_completed)
      {
        /*  If open failed, send error to console, and end      */
        if (tcb-&gt; handle &lt; 0)
          {
            <A href="smt65.htm#sendfmt">sendfmt</A> (&console, "ERROR",
                     "Could not open %s for output", thread-&gt; name);
            <A href="smt64.htm#senderr">senderr</A> (&console);
            <A href="smt66.htm#raise_exception">raise exception</A> (exception_event);
          }
      }
    else
      {
        if (++tcb-> retries == RETRY_MAX)
          {
            <A href="smt65.htm#sendfmt">sendfmt</A> (&console, "ERROR",
                     "Could not open %s for output", thread-&gt; name);
            <A href="smt65.htm#sendfmt">sendfmt</A> (&console, "ERROR", "Too many retries.")
            <A href="smt66.htm#raise_exception">raise exception</A> (exception_event);
            <A href="smt67.htm#recycle_module">recycle module</A> (FALSE);
          }
      }
}
</PRE>

<H3><A NAME="TOC36">Using Semaphores</A></H3>

<P>A <EM>semaphore</EM> is an object that you can use to
synchronise threads, lock resources, etc.  Semaphores are widely-
used in multithreaded and parallel computing, and the SMT kernel
implements semaphores in a conventional manner.  Semaphores have
these characteristics:
<UL>
<LI>Any program can create or destroy semaphores, at any time,
using <A href="smt52.htm#semaph_create">semaph create</A>() and <A href="smt54.htm#semaph_destroy">semaph destroy</A>().
<LI>Semaphores are identified by name and can be located using
<A href="smt53.htm#semaph_lookup">semaph lookup</A>().
<LI>Any resource - such as a file - can be <EM>protected</EM> by a
semaphore through convention.  All parties that access the
resource agree to use a single semaphore to lock access to the
resource.
<LI>Semaphores have a numeric value that is 0 or greater.
<LI>The initial value for a semaphore indicates the number of
parties that can access the semaphore's resource at once.
'Normal' <EM>binary semaphores</EM> have an initial value of 1.
The SMT kernel permits <EM>general semaphores</EM> with an initial
value of 1 or greater.
<LI>A thread that wants to access a semaphore's resource uses
<A href="smt55.htm#semaph_wait">semaph wait</A>() to wait until the semaphore is ready, then it
decrements the semaphore's value.
<LI>When a thread has finished using the resource it uses
<A href="smt56.htm#semaph_signal">semaph signal</A>() to increment the semaphore's value, so allow
other threads to access the resource.
</UL>

<H3><A NAME="TOC37">Replacing The Standard Agents</A></H3>

<P>In realistic projects you will want to replace the operator
console agent and perhaps the logging agent with your own,
customised versions.  One way to do this is to modify the code of
the programs we supply.  However, this just causes maintenance
problems.  A better way is to use the existing code as a basis for
new agents that use the same agent name (but written as a
different source file).  Initialise the replacement agent from
your main() function.  Then, the standard agent will never be
initialised.  All events normally sent to the standard agent will
be sent to your agent instead.  Do not try to change the form or
meaning of events sent to the standard agents.

<HR><TABLE WIDTH=100%><TR><TD ALIGN=LEFT WIDTH=60%>
 | <A href="index.htm">&lt;&lt;</A> | <A href="smt2.htm">&lt;</A>
 | <A href="smt4.htm">&gt;</A> | <A href="smt91.htm">&gt;&gt;</A>
<TD ALIGN=RIGHT NOWRAP>
<A HREF="/index.htm">
<IMG SRC="im0096c.gif" WIDTH=96 HEIGHT=36 ALT="iMatix" BORDER=0 ALIGN=RIGHT>
</A>
<FONT SIZE=2>Copyright &#169; 1996-99 iMatix Corporation</TABLE>
</BODY></HTML>
